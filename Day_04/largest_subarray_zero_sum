class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length==0){
            return 0;
        }
        Set<Integer> st=new HashSet<>();
        for(int i:nums){
            st.add(i);
        }
        int final_count=0;
        for(int i:nums){
            if(!st.contains(i-1)){
                int curr_num=i;
                int cur_count=1;
                while(st.contains(curr_num+1)){
                cur_count+=1;
                curr_num+=1;
                }
                final_count=Math.max(final_count,cur_count);
            }
        }
        return final_count;

//         if(arr.length==0){
//             return 0;
//         }
//         SortedSet<Integer> s=new TreeSet<>();
//         for(int i:arr){
//             s.add(i);
//         }
//         List<Integer> nums=new ArrayList<>(s);
//         int count=1;
//         int max=0;
//         for(int i=1; i<nums.size(); i++){
//             if(nums.get(i)-nums.get(i-1)==1){
//                 count++;
//             }
//             else if(nums.get(i)==nums.get(i-1)){
//                 continue;
//             }
//             else{
//                 max=Math.max(max,count);
//                 count=1;
//             }
//         }
//         max=Math.max(max,count);
        
//         return max;
        
        
        // Arrays.sort(nums);
        // int count=1;
        // int max=0;
        // for(int i=1; i<nums.length; i++){
        //     if(nums[i]-nums[i-1]==1){
        //         count++;
        //     }
        //     else if(nums[i]==nums[i-1]){
        //         continue;
        //     }
        //     else{
        //         temp.add(count);
        //         count=1;
        //     }
        // }
        // temp.add(count);
        // for(int i:temp){
        //     max=(max>i)?max:i;
        // }
        // return max;
    }
}