class Solution {
    public static void findQueen(int col, List<List<String>> ans, char[][] chessboard, int[] leftRow, int[] uperD, int[] lowerD){
        if(col==chessboard.length){
            ans.add(addStr(chessboard));
            return;
        }
        for(int row=0; row<chessboard.length; row++){
            if(leftRow[row]==0 && lowerD[row+col]==0 && uperD[chessboard.length-1+col-row]==0){
                chessboard[row][col]='Q';
                leftRow[row]=1;
                lowerD[row+col]=1;
                uperD[chessboard.length-1+col-row]=1;
                findQueen(col+1,ans,chessboard,leftRow,uperD,lowerD);
                chessboard[row][col]='.';
                leftRow[row]=0;
                lowerD[row+col]=0;
                uperD[chessboard.length-1+col-row]=0;
            }
        }
    }
    public static List<String> addStr(char[][] chessboard){
        List<String> res=new LinkedList<>();
        for(int i=0; i<chessboard.length; i++){
            String str=new String(chessboard[i]);
            res.add(str);
        }
        return res;
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans=new LinkedList<>();
        char[][] chessboard=new char[n][n];
        int[] leftRow=new int[n];
        int[] lowerD=new int[2*n-1];
        int[] uperD=new int[2*n-1];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                chessboard[i][j]='.';
            }
        }
        findQueen(0,ans,chessboard,leftRow,uperD,lowerD);
        return ans;
    }
}