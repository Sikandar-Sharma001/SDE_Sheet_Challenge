class Solution
{
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList<Integer> ans=new ArrayList<>();
	    if(node==null){
	        return ans;
	    }
	    Stack<Integer> st= new Stack<>();
	    ans.add(node.data);
	    if(node.left==null && node.right==null){
	        return ans;
	    }
	    leftBoundary(node.left,ans);
	    leafNodes(node,ans);
	    rightBoundary(node.right,st);
	    while(!st.isEmpty()){
	        ans.add(st.pop());
	    }
	    return ans;
	}
	void leftBoundary(Node node, ArrayList<Integer> ans){
	    if(node==null){
	        return;
	    }
	    if(node.left!=null){
	        ans.add(node.data);
	        leftBoundary(node.left,ans);
	    }
	    if(node.left==null && node.right!=null){
	        ans.add(node.data);
	        leftBoundary(node.right,ans);
	    }
	}
	void leafNodes(Node node, ArrayList<Integer> ans){
	    if(node==null){
	        return;
	    }
	    if(node.left==null && node.right==null){
	        ans.add(node.data);
	    }
	    leafNodes(node.left,ans);
	    leafNodes(node.right,ans);
	}
	void rightBoundary(Node node, Stack<Integer> st){
	    if(node==null){
	        return ;
	    }
	    if(node.right!=null){
	        st.add(node.data);
	        rightBoundary(node.right,st);
	    }
	    if(node.left!=null && node.right==null){
	        st.add(node.data);
	        rightBoundary(node.left,st);
	    }
	}
}