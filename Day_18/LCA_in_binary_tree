class Solution {
//     public boolean root_node(TreeNode root, TreeNode node, ArrayList<TreeNode> list){
//         if(root==null){
//             return false;
//         }
//         list.add(root);
//         if(root==node){
//             return true;
//         }
//         if(root_node(root.left,node,list) || root_node(root.right,node,list)){
//             return true;
//         }
//         list.remove(list.size()-1);
//         return false;
        
//     }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
//         ArrayList<TreeNode> path1=new ArrayList<>();
//         ArrayList<TreeNode> path2=new ArrayList<>();
        
//         root_node(root,p,path1);
//         root_node(root,q,path2);
//         int i=1;
//         while(i<Math.min(path1.size(),path2.size())){
//             if(path1.get(i)!=path2.get(i)){
//                 break;
//             }
//             i++;
//         }
//         return path1.get(i-1);
        if(root==null ||root==p || root==q){
            return root;
        }
        TreeNode left=lowestCommonAncestor(root.left,p,q);
        TreeNode right=lowestCommonAncestor(root.right,p,q);
        if(left==null){
            return right;
        }
        else if(right==null){
            return left;
        }
        else{
            return root;
        }
    }
}