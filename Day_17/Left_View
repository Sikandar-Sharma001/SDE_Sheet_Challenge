class Tree
{
    void Preorder(Node node, ArrayList<Integer> ans, int level){
        if(node==null){
            return;
        }
        if(ans.size()==level)//selecting first element
        {
            ans.add(node.data);
        }
        Preorder(node.left,ans,level+1);
        Preorder(node.right,ans,level+1);
    }
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
        ArrayList<Integer> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        // Queue<Node> q=new LinkedList<>();
        // q.offer(root);
        // while(!q.isEmpty()){
        //     int len=q.size();
        //     ans.add(q.peek().data);
        //     for(int i=0; i<len; i++){
        //         if(q.peek().left!=null){
        //             q.offer(q.peek().left);
        //         }
        //         if(q.peek().right!=null){
        //             q.offer(q.peek().right);
        //         }
        //         q.poll();
        //     }
        // }
        // return ans;
        int level=0;
        Preorder(root,ans,level);
        return ans;
    }
}