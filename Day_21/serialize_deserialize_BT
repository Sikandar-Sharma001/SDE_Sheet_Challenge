public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null){
            return "";
        }
        Queue<TreeNode> q= new LinkedList<>();
        StringBuilder sb= new StringBuilder();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode node=q.poll();
            if(node==null){
                sb.append("N ");
                continue;
            }
            sb.append(node.val+" ");
            q.offer(node.left);
            q.offer(node.right);
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data==""){
            return null;
        }
        Queue<TreeNode> q= new LinkedList<>();
        String[] str=data.split(" ");
        TreeNode root= new TreeNode(Integer.parseInt(str[0]));
        q.offer(root);
        while(!q.isEmpty()){
            
            for(int i=1; i<str.length; i++){
                TreeNode node= q.poll();
                if(!str[i].equals("N")){
                TreeNode left=new TreeNode(Integer.parseInt(str[i]));
                node.left=left;
                q.offer(left);
            }
            if(!str[++i].equals("N")){
                TreeNode right= new TreeNode(Integer.parseInt(str[i]));
                node.right=right;
                q.offer(right);
            }
            }
        }
        return root;
    }
}